# ==================================
# 🚀 DEPLOY STAGING
# ==================================
# Deploy automático para staging no Vercel
# Trigger: Push na branch 'develop'

name: 🚀 Deploy Staging

on:
  push:
    branches:
      - develop
  workflow_dispatch:  # Permite trigger manual

# Cancelar workflows anteriores da mesma branch
concurrency:
  group: staging-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '22'
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  # ==================================
  # 🏗️ BUILD & TEST
  # ==================================
  build-and-test:
    name: 🏗️ Build & Test
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🔍 Lint
        run: npm run lint

      - name: 🏗️ Build
        run: npm run build
        env:
          SKIP_ENV_VALIDATION: true

      - name: 🧪 Run unit tests
        run: npm run test:unit

      - name: 📊 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-staging
          path: .next/
          retention-days: 7

  # ==================================
  # 🚀 DEPLOY TO VERCEL STAGING
  # ==================================
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-and-test]
    timeout-minutes: 10
    environment:
      name: staging
      url: ${{ steps.deploy.outputs.url }}

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Install Vercel CLI
        run: npm install --global vercel@latest

      - name: 🔗 Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

      - name: 🏗️ Build Project Artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}

      - name: 🚀 Deploy to Vercel Staging
        id: deploy
        run: |
          DEPLOY_URL=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }} 2>&1 | grep -o 'https://[^ ]*')
          echo "url=$DEPLOY_URL" >> $GITHUB_OUTPUT
          echo "✅ Deployed to: $DEPLOY_URL"

      - name: 💬 Comment PR with Deploy URL
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.name,
              body: `🚀 **Staging Deploy Success!**\n\n📎 **URL:** ${{ steps.deploy.outputs.url }}\n\n✅ Build passed all checks.`
            })

  # ==================================
  # 🔔 NOTIFY
  # ==================================
  notify:
    name: 🔔 Notify
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: always()

    steps:
      - name: 📊 Deployment Status
        run: |
          if [ "${{ needs.deploy-staging.result }}" == "success" ]; then
            echo "✅ Staging deployment successful!"
          else
            echo "❌ Staging deployment failed!"
            exit 1
          fi

      - name: 📝 Create deployment summary
        run: |
          echo "## 🚀 Staging Deployment" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** \`develop\`" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ${{ needs.deploy-staging.result }}" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by:** @${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
