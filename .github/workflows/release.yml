# ==================================
# 📦 RELEASE AUTOMATION
# ==================================
# Gera release notes automáticas ao criar tag
# Trigger: Push de tag v* (ex: v1.0.0)

name: 📦 Create Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: read

jobs:
  # ==================================
  # 📝 GENERATE RELEASE NOTES
  # ==================================
  create-release:
    name: 📝 Generate Release Notes
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🏷️ Get version from tag
        id: get_version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "version_number=${VERSION#v}" >> $GITHUB_OUTPUT

      - name: 📝 Get previous tag
        id: get_previous_tag
        run: |
          PREVIOUS_TAG=$(git describe --abbrev=0 --tags $(git rev-list --tags --skip=1 --max-count=1) 2>/dev/null || echo "")
          echo "previous_tag=$PREVIOUS_TAG" >> $GITHUB_OUTPUT
          echo "📌 Previous tag: $PREVIOUS_TAG"

      - name: 📊 Generate changelog
        id: changelog
        run: |
          if [ -z "${{ steps.get_previous_tag.outputs.previous_tag }}" ]; then
            COMMITS=$(git log --pretty=format:"- %s (%h)" --no-merges)
          else
            COMMITS=$(git log ${{ steps.get_previous_tag.outputs.previous_tag }}..${{ steps.get_version.outputs.version }} --pretty=format:"- %s (%h)" --no-merges)
          fi

          # Categorize commits
          FEATURES=$(echo "$COMMITS" | grep -i "^- \(feat\|feature\|add\)" || true)
          FIXES=$(echo "$COMMITS" | grep -i "^- \(fix\|bugfix\|bug\)" || true)
          IMPROVEMENTS=$(echo "$COMMITS" | grep -i "^- \(improve\|update\|enhance\|refactor\)" || true)
          BREAKING=$(echo "$COMMITS" | grep -i "^- \(breaking\|major\)" || true)
          DOCS=$(echo "$COMMITS" | grep -i "^- \(docs\|doc\|documentation\)" || true)
          CHORE=$(echo "$COMMITS" | grep -i "^- \(chore\|ci\|build\|deps\)" || true)
          OTHER=$(echo "$COMMITS" | grep -vi "\(feat\|feature\|add\|fix\|bugfix\|bug\|improve\|update\|enhance\|refactor\|breaking\|major\|docs\|doc\|documentation\|chore\|ci\|build\|deps\)" || true)

          # Build changelog
          CHANGELOG="## 🎉 What's Changed\n\n"

          if [ -n "$BREAKING" ]; then
            CHANGELOG="${CHANGELOG}### 💥 Breaking Changes\n${BREAKING}\n\n"
          fi

          if [ -n "$FEATURES" ]; then
            CHANGELOG="${CHANGELOG}### 🚀 Features\n${FEATURES}\n\n"
          fi

          if [ -n "$IMPROVEMENTS" ]; then
            CHANGELOG="${CHANGELOG}### ⚡ Improvements\n${IMPROVEMENTS}\n\n"
          fi

          if [ -n "$FIXES" ]; then
            CHANGELOG="${CHANGELOG}### 🐛 Bug Fixes\n${FIXES}\n\n"
          fi

          if [ -n "$DOCS" ]; then
            CHANGELOG="${CHANGELOG}### 📝 Documentation\n${DOCS}\n\n"
          fi

          if [ -n "$CHORE" ]; then
            CHANGELOG="${CHANGELOG}### 🔧 Chores & Maintenance\n${CHORE}\n\n"
          fi

          if [ -n "$OTHER" ]; then
            CHANGELOG="${CHANGELOG}### 📦 Other Changes\n${OTHER}\n\n"
          fi

          # Add footer
          if [ -z "${{ steps.get_previous_tag.outputs.previous_tag }}" ]; then
            CHANGELOG="${CHANGELOG}---\n\n**Full Changelog**: https://github.com/${{ github.repository }}/commits/${{ steps.get_version.outputs.version }}"
          else
            CHANGELOG="${CHANGELOG}---\n\n**Full Changelog**: https://github.com/${{ github.repository }}/compare/${{ steps.get_previous_tag.outputs.previous_tag }}...${{ steps.get_version.outputs.version }}"
          fi

          # Save to file
          echo -e "$CHANGELOG" > changelog.md

      - name: 📝 Create CHANGELOG.md entry
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          DATE=$(date +%Y-%m-%d)

          # Prepend to CHANGELOG.md if it exists
          if [ -f CHANGELOG.md ]; then
            TEMP_FILE=$(mktemp)
            echo "# Changelog" > $TEMP_FILE
            echo "" >> $TEMP_FILE
            echo "## [$VERSION] - $DATE" >> $TEMP_FILE
            echo "" >> $TEMP_FILE
            cat changelog.md >> $TEMP_FILE
            echo "" >> $TEMP_FILE
            tail -n +2 CHANGELOG.md >> $TEMP_FILE
            mv $TEMP_FILE CHANGELOG.md

            git config user.name "GitHub Actions"
            git config user.email "actions@github.com"
            git add CHANGELOG.md
            git commit -m "docs: update CHANGELOG.md for $VERSION [skip ci]" || true
            git push origin HEAD:main || true
          fi

      - name: 📦 Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ steps.get_version.outputs.version }}
          body_path: changelog.md
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 📊 Release Summary
        run: |
          echo "## 📦 Release Created" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** \`${{ steps.get_version.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Release URL:** https://github.com/${{ github.repository }}/releases/tag/${{ steps.get_version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📝 Release Notes Preview" >> $GITHUB_STEP_SUMMARY
          cat changelog.md >> $GITHUB_STEP_SUMMARY
