# ==================================
# 🚀 DEPLOY PRODUCTION
# ==================================
# Deploy para produção com aprovação manual
# Trigger: Criação de tag v* (ex: v1.0.0, v1.2.3)

name: 🚀 Deploy Production

on:
  push:
    tags:
      - 'v*.*.*'  # v1.0.0, v1.2.3, etc
  workflow_dispatch:  # Permite trigger manual

# Prevent concurrent production deployments
concurrency:
  group: production
  cancel-in-progress: false

env:
  NODE_VERSION: '22'
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  # ==================================
  # ✅ VALIDATION
  # ==================================
  validate:
    name: ✅ Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🏷️ Get version from tag
        id: get_version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "📦 Version: $VERSION"

      - name: ✅ Validate tag format
        run: |
          if [[ ! "${{ steps.get_version.outputs.version }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "❌ Invalid tag format. Use: v1.0.0"
            exit 1
          fi
          echo "✅ Tag format valid"

  # ==================================
  # 🏗️ BUILD & TEST
  # ==================================
  build-and-test:
    name: 🏗️ Build & Full Test Suite
    runs-on: ubuntu-latest
    needs: [validate]
    timeout-minutes: 20

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: docker
          POSTGRES_PASSWORD: docker
          POSTGRES_DB: docker_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🔍 Lint
        run: npm run lint

      - name: 🏗️ Build
        run: npm run build
        env:
          SKIP_ENV_VALIDATION: true

      - name: 🧪 Run unit tests
        run: npm run test:unit

      - name: 🧪 Run API tests
        run: npm run test:api
        env:
          DATABASE_URL: postgresql://docker:docker@localhost:5432/docker_test
          TEST_DATABASE_URL: postgresql://docker:docker@localhost:5432/docker_test

      - name: 📊 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-production-${{ needs.validate.outputs.version }}
          path: .next/
          retention-days: 30

  # ==================================
  # 🔒 SECURITY SCAN
  # ==================================
  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: [validate]

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔒 Run npm audit
        run: npm audit --production --audit-level=moderate || true

      - name: 🔍 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📊 Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # ==================================
  # ⏸️ APPROVAL GATE
  # ==================================
  approval:
    name: ⏸️ Require Manual Approval
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan]
    environment:
      name: production-approval

    steps:
      - name: ⏸️ Waiting for approval...
        run: echo "⏸️ Waiting for manual approval to deploy to production..."

  # ==================================
  # 🚀 DEPLOY TO VERCEL PRODUCTION
  # ==================================
  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [validate, approval]
    timeout-minutes: 15
    environment:
      name: production
      url: https://quayer.com

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Install Vercel CLI
        run: npm install --global vercel@latest

      - name: 🔗 Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      - name: 🏗️ Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}

      - name: 🚀 Deploy to Vercel Production
        run: |
          vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}
          echo "✅ Deployed to production!"

  # ==================================
  # 🐳 BUILD & PUSH DOCKER IMAGE
  # ==================================
  docker-build:
    name: 🐳 Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: [validate, approval]

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔑 Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: 🏷️ Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: quayer/app
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest

      - name: 🏗️ Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # ==================================
  # 🔔 NOTIFY SUCCESS
  # ==================================
  notify-success:
    name: 🔔 Notify Success
    runs-on: ubuntu-latest
    needs: [validate, deploy-production, docker-build]
    if: success()

    steps:
      - name: 📝 Create deployment summary
        run: |
          echo "## 🚀 Production Deployment Success!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Version:** \`v${{ needs.validate.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Vercel:** Deployed to production" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Docker:** Image pushed to registry" >> $GITHUB_STEP_SUMMARY
          echo "🌐 **URL:** https://quayer.com" >> $GITHUB_STEP_SUMMARY
          echo "👤 **Deployed by:** @${{ github.actor }}" >> $GITHUB_STEP_SUMMARY

  # ==================================
  # 🚨 NOTIFY FAILURE
  # ==================================
  notify-failure:
    name: 🚨 Notify Failure
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: failure()

    steps:
      - name: 🚨 Deployment failed
        run: |
          echo "## ❌ Production Deployment Failed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Check the logs for details." >> $GITHUB_STEP_SUMMARY
          exit 1
