name: CI/CD Pipeline

on:
  push:
    branches: [main, master, develop]
  pull_request:
    branches: [main, master, develop]

env:
  NODE_VERSION: '20.x'
  DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db

jobs:
  # ==================== LINT & TYPE CHECK ====================
  lint-and-typecheck:
    name: 🔍 Lint & TypeCheck
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔍 Run ESLint
        run: npm run lint
        continue-on-error: false

      - name: 🔷 TypeScript type check
        run: npx tsc --noEmit
        continue-on-error: false

  # ==================== UNIT TESTS ====================
  unit-tests:
    name: 🧪 Unit Tests
    runs-on: ${{ matrix.os }}
    needs: [lint-and-typecheck]

    strategy:
      fail-fast: false
      matrix:
        node-version: [18.x, 20.x, 22.x]
        os: [ubuntu-latest, windows-latest]

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: 💾 Cache node modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
            .next/cache
          key: ${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ matrix.node-version }}-
            ${{ runner.os }}-node-

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🧪 Run unit tests (parallel)
        run: npm run test:unit -- --coverage --maxWorkers=4
        env:
          NODE_ENV: test

      - name: 📊 Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest' && matrix.node-version == '20.x'
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage/lcov.info
          flags: unit
          name: unit-tests-node-${{ matrix.node-version }}
          fail_ci_if_error: false

  # ==================== API TESTS ====================
  api-tests:
    name: 🔌 API Tests
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck]

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 💾 Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.os }}-node-${{ env.NODE_VERSION }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ env.NODE_VERSION }}-
            ${{ runner.os }}-node-

      - name: 📦 Install dependencies
        run: npm ci

      - name: 💾 Cache Prisma
        uses: actions/cache@v4
        with:
          path: |
            node_modules/.prisma
            node_modules/@prisma
          key: ${{ runner.os }}-prisma-${{ hashFiles('**/prisma/schema.prisma') }}

      - name: 🗄️ Setup database
        run: |
          npx prisma migrate deploy
          npx prisma generate
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}

      - name: 🌱 Seed test data
        run: npx tsx prisma/seed-simple.ts
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}

      - name: 🔌 Run API tests (parallel)
        run: npm run test:api -- --maxWorkers=4
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}
          NODE_ENV: test

  # ==================== E2E TESTS ====================
  e2e-tests:
    name: 🌐 E2E Tests
    runs-on: ubuntu-latest
    needs: [unit-tests, api-tests]
    timeout-minutes: 30

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 💾 Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
            .next/cache
          key: ${{ runner.os }}-node-e2e-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-e2e-
            ${{ runner.os }}-node-

      - name: 📦 Install dependencies
        run: npm ci

      - name: 💾 Cache Prisma
        uses: actions/cache@v4
        with:
          path: |
            node_modules/.prisma
            node_modules/@prisma
          key: ${{ runner.os }}-prisma-${{ hashFiles('**/prisma/schema.prisma') }}

      - name: 🗄️ Setup database
        run: |
          npx prisma migrate deploy
          npx prisma generate
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}

      - name: 🌱 Seed test data
        run: npx tsx prisma/seed-simple.ts
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}

      - name: 💾 Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('**/package-lock.json') }}

      - name: 📦 Install Playwright browsers
        run: npx playwright install --with-deps chromium

      - name: 🌐 Run E2E tests (parallel)
        run: npm run test:e2e -- --workers=2
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}
          BASE_URL: http://localhost:3000
          CI: true

      - name: 📸 Upload test artifacts
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 7

      - name: 📸 Upload screenshots
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: test-screenshots
          path: test-results/
          retention-days: 7

  # ==================== BUILD ====================
  build:
    name: 🏗️ Build
    runs-on: ubuntu-latest
    needs: [e2e-tests]

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 💾 Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.os }}-node-build-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-build-
            ${{ runner.os }}-node-

      - name: 📦 Install dependencies
        run: npm ci

      - name: 💾 Cache Next.js build
        uses: actions/cache@v4
        with:
          path: |
            .next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-
            ${{ runner.os }}-nextjs-

      - name: 🏗️ Build Next.js
        run: npm run build
        env:
          NEXT_TELEMETRY_DISABLED: 1

      - name: 📦 Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: build
          path: .next/
          retention-days: 1

  # ==================== SECURITY AUDIT ====================
  security-audit:
    name: 🔒 Security Audit
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck]

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔒 Run npm audit
        run: npm audit --audit-level=high
        continue-on-error: true

      - name: 🔍 Check for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD

  # ==================== DEPLOY STAGING (Optional) ====================
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, security-audit]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment:
      name: staging
      url: https://staging.quayer.com

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: build
          path: .next/

      - name: 🚀 Deploy to Vercel (Staging)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          scope: ${{ secrets.VERCEL_ORG_ID }}

  # ==================== DEPLOY PRODUCTION ====================
  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, security-audit]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: production
      url: https://app.quayer.com

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: build
          path: .next/

      - name: 🚀 Deploy to Vercel (Production)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          scope: ${{ secrets.VERCEL_ORG_ID }}

      - name: 📢 Notify deployment success
        if: success()
        run: |
          echo "✅ Production deployment successful!"
          echo "URL: https://app.quayer.com"

  # ==================== NOTIFICATION ====================
  notify:
    name: 📢 Notify Results
    runs-on: ubuntu-latest
    needs: [deploy-production, deploy-staging]
    if: always()

    steps:
      - name: 📢 Send notification
        run: |
          echo "Pipeline completed!"
          echo "Status: ${{ job.status }}"
