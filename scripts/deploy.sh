#!/bin/bash

# ===========================================
# üöÄ QUAYER - DEPLOY SCRIPT
# ===========================================
# Deploy manual para diferentes ambientes
# Uso: ./scripts/deploy.sh [environment]
# Environments: staging, production

set -e

# Colors
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m'

ENVIRONMENT=${1:-staging}

echo "=========================================="
echo "üöÄ QUAYER - DEPLOY"
echo "=========================================="
echo ""

if [ "$ENVIRONMENT" != "staging" ] && [ "$ENVIRONMENT" != "production" ]; then
    echo -e "${RED}‚ùå Environment inv√°lido: $ENVIRONMENT${NC}"
    echo "Use: staging ou production"
    exit 1
fi

# Confirmation for production
if [ "$ENVIRONMENT" == "production" ]; then
    echo -e "${RED}‚ö†Ô∏è  DEPLOY PARA PRODU√á√ÉO${NC}"
    echo ""
    read -p "Tem certeza? Digite 'yes' para confirmar: " -r
    echo ""
    if [ "$REPLY" != "yes" ]; then
        echo "Deploy cancelado."
        exit 0
    fi
fi

# Pre-deploy checks
echo -e "${BLUE}üîç Running pre-deploy checks...${NC}"
echo ""

# Check git status
if ! git diff-index --quiet HEAD --; then
    echo -e "${RED}‚ùå Existem altera√ß√µes n√£o commitadas!${NC}"
    echo "Commit ou stash suas altera√ß√µes antes de deployar."
    exit 1
fi

echo -e "${GREEN}‚úÖ Git clean${NC}"

# Run tests
echo ""
echo -e "${BLUE}üß™ Running tests...${NC}"
npm run test:ci

echo -e "${GREEN}‚úÖ Tests passed${NC}"

# Build
echo ""
echo -e "${BLUE}üèóÔ∏è  Building...${NC}"
npm run build

echo -e "${GREEN}‚úÖ Build successful${NC}"

# Deploy based on environment
echo ""
echo -e "${BLUE}üöÄ Deploying to $ENVIRONMENT...${NC}"

if [ "$ENVIRONMENT" == "staging" ]; then
    # Vercel staging
    if command -v vercel &> /dev/null; then
        vercel --confirm
        echo -e "${GREEN}‚úÖ Deployed to Vercel staging${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Vercel CLI not found${NC}"
        echo "Install with: npm install -g vercel"
        exit 1
    fi

elif [ "$ENVIRONMENT" == "production" ]; then
    # Check if on main branch
    CURRENT_BRANCH=$(git branch --show-current)
    if [ "$CURRENT_BRANCH" != "main" ]; then
        echo -e "${RED}‚ùå Production deploy deve ser feito da branch 'main'${NC}"
        echo "Branch atual: $CURRENT_BRANCH"
        exit 1
    fi

    # Get version
    if [ -f VERSION ]; then
        VERSION=$(cat VERSION)
    else
        echo -e "${RED}‚ùå VERSION file not found${NC}"
        exit 1
    fi

    echo ""
    echo "Version: v$VERSION"
    echo ""

    # Create and push tag
    echo -e "${BLUE}üè∑Ô∏è  Creating tag v$VERSION...${NC}"

    if git rev-parse "v$VERSION" >/dev/null 2>&1; then
        echo -e "${YELLOW}‚ö†Ô∏è  Tag v$VERSION already exists${NC}"
        read -p "Use existing tag? (y/n) " -n 1 -r
        echo ""
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            exit 1
        fi
    else
        git tag -a "v$VERSION" -m "Release v$VERSION"
        echo -e "${GREEN}‚úÖ Tag created${NC}"
    fi

    # Push tag
    echo ""
    echo -e "${BLUE}üì§ Pushing tag to GitHub...${NC}"
    git push origin "v$VERSION"

    echo -e "${GREEN}‚úÖ Tag pushed${NC}"
    echo ""
    echo "üéâ Production deploy iniciado!"
    echo ""
    echo "GitHub Actions ir√°:"
    echo "1. Run full test suite"
    echo "2. Security scan"
    echo "3. Aguardar aprova√ß√£o manual"
    echo "4. Deploy to Vercel production"
    echo "5. Build and push Docker image"
    echo ""
    echo "Acompanhe em: https://github.com/Quayer/app-quayer/actions"
fi

# Post-deploy info
echo ""
echo "=========================================="
echo "üìä DEPLOY INFO"
echo "=========================================="
echo ""
echo "Environment: $ENVIRONMENT"
echo "Git Commit: $(git rev-parse --short HEAD)"
echo "Git Branch: $(git branch --show-current)"

if [ "$ENVIRONMENT" == "production" ] && [ -f VERSION ]; then
    echo "Version: v$(cat VERSION)"
fi

echo ""
echo -e "${GREEN}‚úÖ Deploy completed!${NC}"
echo ""
echo "=========================================="
