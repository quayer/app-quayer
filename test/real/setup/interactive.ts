import readline from 'readline'

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
})

/**
 * Faz uma pergunta ao usu√°rio e aguarda resposta
 */
export function askUser(question: string): Promise<string> {
  return new Promise((resolve) => {
    rl.question(`\n${question}\n> `, (answer) => {
      resolve(answer.trim())
    })
  })
}

/**
 * Aguarda usu√°rio pressionar ENTER
 */
export async function waitForUserAction(message: string): Promise<void> {
  console.log(`\n‚è∏Ô∏è  ${message}`)
  await new Promise<void>((resolve) => {
    rl.question('Pressione ENTER quando estiver pronto...', () => {
      resolve()
    })
  })
}

/**
 * Pergunta sim/n√£o ao usu√°rio
 */
export async function confirmAction(message: string): Promise<boolean> {
  const answer = await askUser(`${message} (s/n)`)
  return answer.toLowerCase() === 's' || answer.toLowerCase() === 'sim' || answer.toLowerCase() === 'y' || answer.toLowerCase() === 'yes'
}

/**
 * Solicita email ao usu√°rio com valida√ß√£o b√°sica
 */
export async function askEmail(prompt: string = 'Digite um email v√°lido:'): Promise<string> {
  const email = await askUser(prompt)

  // Valida√ß√£o b√°sica de email
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
  if (!emailRegex.test(email)) {
    console.log('‚ùå Email inv√°lido. Tente novamente.')
    return askEmail(prompt)
  }

  return email
}

/**
 * Solicita c√≥digo OTP (6 d√≠gitos)
 */
export async function askOTP(prompt: string = 'Digite o c√≥digo OTP (6 d√≠gitos):'): Promise<string> {
  const otp = await askUser(prompt)

  // Valida√ß√£o: 6 d√≠gitos
  if (!/^\d{6}$/.test(otp)) {
    console.log('‚ùå OTP deve ter 6 d√≠gitos. Tente novamente.')
    return askOTP(prompt)
  }

  return otp
}

/**
 * Solicita n√∫mero de telefone
 */
export async function askPhoneNumber(prompt: string = 'Digite o n√∫mero com DDI (ex: 5511999999999):'): Promise<string> {
  const phone = await askUser(prompt)

  // Valida√ß√£o b√°sica: apenas n√∫meros, m√≠nimo 10 d√≠gitos
  if (!/^\d{10,}$/.test(phone)) {
    console.log('‚ùå N√∫mero inv√°lido. Use apenas n√∫meros com DDI. Tente novamente.')
    return askPhoneNumber(prompt)
  }

  return phone
}

/**
 * Mostra QR Code ASCII art formatado
 */
export function displayQRCode(qrCode: string): void {
  console.log('\n' + '‚ïê'.repeat(60))
  console.log('üì± QR CODE PARA ESCANEAR COM WHATSAPP')
  console.log('‚ïê'.repeat(60))
  console.log(qrCode)
  console.log('‚ïê'.repeat(60) + '\n')
}

/**
 * Exibe progresso com anima√ß√£o
 */
export async function showProgress(message: string, durationMs: number): Promise<void> {
  const frames = ['‚†ã', '‚†ô', '‚†π', '‚†∏', '‚†º', '‚†¥', '‚†¶', '‚†ß', '‚†á', '‚†è']
  let frameIndex = 0

  return new Promise((resolve) => {
    const interval = setInterval(() => {
      process.stdout.write(`\r${frames[frameIndex]} ${message}`)
      frameIndex = (frameIndex + 1) % frames.length
    }, 80)

    setTimeout(() => {
      clearInterval(interval)
      process.stdout.write('\r' + ' '.repeat(message.length + 3) + '\r')
      resolve()
    }, durationMs)
  })
}

/**
 * Fecha o readline interface
 */
export function closeInteractive(): void {
  rl.close()
}

/**
 * Mostra menu de op√ß√µes e retorna escolha
 */
export async function showMenu(title: string, options: string[]): Promise<number> {
  console.log(`\n${title}`)
  console.log('‚îÄ'.repeat(50))
  options.forEach((option, index) => {
    console.log(`${index + 1}. ${option}`)
  })
  console.log('‚îÄ'.repeat(50))

  const choice = await askUser('Escolha uma op√ß√£o:')
  const num = parseInt(choice)

  if (isNaN(num) || num < 1 || num > options.length) {
    console.log('‚ùå Op√ß√£o inv√°lida. Tente novamente.')
    return showMenu(title, options)
  }

  return num
}
