/**
 * üî• TESTE BRUTAL: GERENCIAMENTO DE PERMISS√ïES (ADMIN)
 * 
 * Valida sistema de permiss√µes RBAC:
 * - Visualizar matriz de permiss√µes
 * - Validar roles padr√£o (admin, master, manager, user)
 * - Testar permiss√µes em tempo real
 * 
 * FILOSOFIA 100% REAL:
 * - PostgreSQL real
 * - Playwright browser real
 * - RBAC real
 */

import { test, expect, Page } from '@playwright/test';
import { PrismaClient } from '@prisma/client';

const db = new PrismaClient();
const BASE_URL = process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000';

async function loginAsAdmin(page: Page) {
  await page.goto(`${BASE_URL}/login`);
  await page.fill('input[name="email"]', 'admin@quayer.com');
  await page.fill('input[name="password"]', '123456');
  await page.click('button[type="submit"]');
  await page.waitForURL(`${BASE_URL}/admin`, { timeout: 10000 });
}

test.describe('üî• ADMIN PERMISSIONS - TESTE BRUTAL', () => {
  test('1. ‚úÖ Admin deve acessar /admin/permissions', async ({ page }) => {
    console.log('\nüöÄ TESTE 1: Acessar p√°gina de permiss√µes');
    
    await loginAsAdmin(page);
    await page.goto(`${BASE_URL}/admin/permissions`);
    
    await expect(page).toHaveURL(`${BASE_URL}/admin/permissions`);
    console.log('‚úÖ P√°gina de permiss√µes acess√≠vel');
  });

  test('2. ‚úÖ Deve validar roles padr√£o no sistema', async ({ page }) => {
    console.log('\nüîê TESTE 2: Validar roles padr√£o');
    
    await loginAsAdmin(page);
    
    const roleStats = await db.$queryRaw<Array<{ role: string; count: bigint }>>`
      SELECT role, COUNT(*) as count
      FROM "User"
      GROUP BY role
    `;
    
    console.log('üîê Roles no sistema:');
    roleStats.forEach(stat => {
      console.log(`  - ${stat.role}: ${stat.count} usu√°rio(s)`);
    });
    
    // Validar roles padr√£o esperados
    const expectedRoles = ['admin', 'user'];
    const existingRoles = roleStats.map(s => s.role);
    
    expectedRoles.forEach(role => {
      const hasRole = existingRoles.includes(role);
      console.log(`  ${hasRole ? '‚úÖ' : '‚ùå'} Role "${role}": ${hasRole ? 'existe' : 'n√£o encontrado'}`);
    });
    
    console.log('‚úÖ Valida√ß√£o de roles completa');
  });

  test('3. ‚úÖ Deve validar permiss√µes de organiza√ß√£o (RBAC)', async ({ page }) => {
    console.log('\nüè¢ TESTE 3: Validar RBAC de organiza√ß√µes');
    
    // Buscar roles em UserOrganization
    const orgRoleStats = await db.$queryRaw<Array<{ role: string; count: bigint }>>`
      SELECT role, COUNT(*) as count
      FROM "UserOrganization"
      GROUP BY role
    `;
    
    console.log('üè¢ Roles em organiza√ß√µes:');
    orgRoleStats.forEach(stat => {
      console.log(`  - ${stat.role}: ${stat.count} rela√ß√£o(√µes)`);
    });
    
    // Validar roles esperados em organiza√ß√µes
    const expectedOrgRoles = ['master', 'manager', 'user'];
    const existingOrgRoles = orgRoleStats.map(s => s.role);
    
    expectedOrgRoles.forEach(role => {
      const hasRole = existingOrgRoles.includes(role);
      console.log(`  ${hasRole ? '‚úÖ' : '‚ö†Ô∏è'} Role "${role}": ${hasRole ? 'existe' : 'n√£o encontrado'}`);
    });
    
    console.log('‚úÖ RBAC de organiza√ß√µes validado');
  });

  test('4. üì∏ Screenshot', async ({ page }) => {
    await loginAsAdmin(page);
    await page.goto(`${BASE_URL}/admin/permissions`);
    await page.waitForTimeout(2000);
    await page.screenshot({ 
      path: 'test-results/screenshots/admin-permissions.png',
      fullPage: true 
    });
    console.log('‚úÖ Screenshot salvo');
  });
});

