/**
 * üî• TESTE BRUTAL: INST√ÇNCIAS WHATSAPP (UAZAPI)
 * 
 * Valida integra√ß√£o COMPLETA com UAZAPI:
 * - Criar inst√¢ncia
 * - Conectar e gerar QR code
 * - Escanear QR code MANUALMENTE
 * - Verificar status (connected)
 * - Obter dados do perfil
 * - Desconectar
 * - Deletar inst√¢ncia
 * 
 * FILOSOFIA 100% REAL:
 * - UAZAPI real
 * - WhatsApp real (QR code manual)
 * - PostgreSQL real
 * - Playwright browser real
 * - Valida√ß√£o dupla: visual + database + UAZAPI status
 */

import { test, expect, Page } from '@playwright/test';
import { PrismaClient } from '@prisma/client';

const db = new PrismaClient();
const BASE_URL = process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000';

async function loginAsUser(page: Page) {
  await page.goto(`${BASE_URL}/login`);
  
  // Buscar usu√°rio com organiza√ß√£o
  const user = await db.user.findFirst({
    where: {
      organizations: {
        some: {}
      }
    }
  });
  
  if (!user) {
    throw new Error('Nenhum usu√°rio com organiza√ß√£o encontrado. Execute db:seed primeiro!');
  }
  
  await page.fill('input[name="email"]', user.email);
  await page.fill('input[name="password"]', '123456');
  await page.click('button[type="submit"]');
  
  // Pode ir para /integracoes ou /onboarding
  await page.waitForTimeout(3000);
}

test.describe('üî• UAZAPI INSTANCES - TESTE BRUTAL', () => {
  let testInstanceId: string | null = null;
  let testInstanceToken: string | null = null;

  test.afterAll(async () => {
    // Limpar inst√¢ncia de teste
    if (testInstanceId) {
      await db.instance.delete({
        where: { id: testInstanceId }
      }).catch(() => console.log('‚ö†Ô∏è  Inst√¢ncia j√° foi deletada'));
    }
    
    await db.$disconnect();
  });

  test('1. ‚úÖ Deve criar nova inst√¢ncia WhatsApp', async ({ page }) => {
    console.log('\nüöÄ TESTE 1: Criar inst√¢ncia');
    
    await loginAsUser(page);
    await page.goto(`${BASE_URL}/integracoes`);
    
    // Procurar bot√£o criar inst√¢ncia
    const createButton = page.locator('button, a').filter({ 
      hasText: /nova inst√¢ncia|new instance|criar|adicionar/i 
    }).first();
    
    await expect(createButton).toBeVisible({ timeout: 5000 });
    await createButton.click();
    await page.waitForTimeout(1000);
    
    // Preencher formul√°rio
    const instanceName = `Test Instance ${Date.now()}`;
    
    console.log(`üìù Criando inst√¢ncia: ${instanceName}`);
    
    await page.fill('input[name="name"], input[placeholder*="Nome"]', instanceName);
    
    // Webhook URL (opcional)
    const webhookInput = page.locator('input[name="webhookUrl"], input[placeholder*="Webhook"]');
    if (await webhookInput.count() > 0) {
      await webhookInput.fill('https://webhook.site/test');
    }
    
    // Submeter
    const submitButton = page.locator('button[type="submit"], button').filter({ 
      hasText: /criar|salvar|save/i 
    }).first();
    
    await submitButton.click();
    await page.waitForTimeout(3000);
    
    // Validar cria√ß√£o no banco
    const createdInstance = await db.instance.findFirst({
      where: { name: instanceName },
      orderBy: { createdAt: 'desc' }
    });
    
    if (createdInstance) {
      testInstanceId = createdInstance.id;
      testInstanceToken = createdInstance.uazapiToken;
      
      console.log(`‚úÖ Inst√¢ncia criada com sucesso:
        - ID: ${createdInstance.id}
        - Nome: ${createdInstance.name}
        - Status: ${createdInstance.status}
        - UAZAPI Token: ${createdInstance.uazapiToken ? '‚úÖ' : '‚ùå'}
        - Broker ID: ${createdInstance.brokerId || 'N/A'}
      `);
      
      expect(createdInstance.uazapiToken).toBeTruthy();
    } else {
      throw new Error('‚ùå Inst√¢ncia N√ÉO foi criada no banco!');
    }
  });

  test('2. ‚úÖ Deve gerar QR code para conex√£o', async ({ page }) => {
    console.log('\nüì± TESTE 2: Conectar e gerar QR code');
    
    if (!testInstanceId) {
      console.log('‚ö†Ô∏è  Inst√¢ncia n√£o foi criada');
      return;
    }
    
    await loginAsUser(page);
    await page.goto(`${BASE_URL}/integracoes`);
    
    const instance = await db.instance.findUnique({
      where: { id: testInstanceId }
    });
    
    if (!instance) return;
    
    console.log(`üì± Conectando: ${instance.name}`);
    
    // Procurar bot√£o conectar
    const connectButton = page.locator('button').filter({ 
      hasText: /conectar|connect|gerar qr/i 
    }).first();
    
    if (await connectButton.count() > 0) {
      await connectButton.click();
      
      // Aguardar QR code aparecer
      await page.waitForTimeout(3000);
      
      // Procurar QR code (pode ser img ou canvas)
      const qrCode = page.locator('img[alt*="QR"], canvas, [data-testid="qr-code"]').first();
      
      await expect(qrCode).toBeVisible({ timeout: 10000 });
      
      // Capturar screenshot do QR code
      await page.screenshot({ 
        path: 'test-results/screenshots/qr-code-instance.png',
        fullPage: false
      });
      
      console.log(`‚úÖ QR code gerado com sucesso!
        üì∏ Screenshot salvo: test-results/screenshots/qr-code-instance.png
        
        ‚è≥ AGUARDANDO SCAN MANUAL DO QR CODE...
        
        Por favor:
        1. Abra o WhatsApp no celular
        2. V√° em Configura√ß√µes > Aparelhos conectados
        3. Escaneie o QR code que apareceu na tela
        4. Aguarde a conex√£o estabelecer
      `);
      
      // Aguardar scan manual (at√© 2 minutos)
      console.log('\n‚è≥ Aguardando 120 segundos para scan manual...');
      await page.waitForTimeout(120000);
      
      // Verificar status no banco
      const connectedInstance = await db.instance.findUnique({
        where: { id: testInstanceId }
      });
      
      if (connectedInstance?.status === 'connected') {
        console.log(`‚úÖ INST√ÇNCIA CONECTADA COM SUCESSO!
          - Status: ${connectedInstance.status}
          - Telefone: ${connectedInstance.phoneNumber}
          - Profile Name: ${connectedInstance.profileName || 'N/A'}
        `);
      } else {
        console.warn(`‚ö†Ô∏è  Status atual: ${connectedInstance?.status}
          Se n√£o conectou, pode precisar de mais tempo ou QR expirou.
        `);
      }
    } else {
      console.log('‚ö†Ô∏è  Bot√£o de conectar n√£o encontrado');
    }
  });

  test('3. ‚úÖ Deve verificar status da inst√¢ncia', async ({ page }) => {
    console.log('\nüîç TESTE 3: Verificar status');
    
    if (!testInstanceId) return;
    
    await loginAsUser(page);
    await page.goto(`${BASE_URL}/integracoes`);
    
    const instance = await db.instance.findUnique({
      where: { id: testInstanceId }
    });
    
    if (!instance) return;
    
    console.log(`üîç Status da inst√¢ncia:
      - Nome: ${instance.name}
      - Status: ${instance.status}
      - Telefone: ${instance.phoneNumber || 'N/A'}
      - UAZAPI Token: ${instance.uazapiToken ? '‚úÖ' : '‚ùå'}
    `);
    
    // Verificar badge de status na UI
    const statusBadge = page.locator('[data-status], .status-badge, .instance-status').first();
    
    if (await statusBadge.count() > 0) {
      const statusText = await statusBadge.textContent();
      console.log(`‚úÖ Status exibido na UI: ${statusText}`);
    }
  });

  test('4. ‚úÖ Deve obter dados do perfil WhatsApp', async ({ page }) => {
    console.log('\nüë§ TESTE 4: Obter profile picture');
    
    if (!testInstanceId) return;
    
    const instance = await db.instance.findUnique({
      where: { id: testInstanceId }
    });
    
    if (!instance || instance.status !== 'connected') {
      console.log('‚ö†Ô∏è  Inst√¢ncia n√£o est√° conectada, pulando teste de profile');
      return;
    }
    
    await loginAsUser(page);
    await page.goto(`${BASE_URL}/integracoes`);
    
    // Procurar foto de perfil da inst√¢ncia
    const profilePic = page.locator('img[alt*="Profile"], img[src*="profile"], .profile-picture').first();
    
    if (await profilePic.count() > 0) {
      const src = await profilePic.getAttribute('src');
      console.log(`‚úÖ Profile picture encontrado: ${src?.substring(0, 50)}...`);
    } else {
      console.log('‚ö†Ô∏è  Profile picture n√£o encontrado na UI');
    }
    
    // Verificar dados no banco
    console.log(`üë§ Dados do perfil no banco:
      - Profile Name: ${instance.profileName || 'N/A'}
      - Profile Pic URL: ${instance.profilePictureUrl || 'N/A'}
      - Phone Number: ${instance.phoneNumber || 'N/A'}
    `);
  });

  test('5. ‚úÖ Deve desconectar inst√¢ncia', async ({ page }) => {
    console.log('\nüîå TESTE 5: Desconectar inst√¢ncia');
    
    if (!testInstanceId) return;
    
    const instance = await db.instance.findUnique({
      where: { id: testInstanceId }
    });
    
    if (!instance || instance.status !== 'connected') {
      console.log('‚ö†Ô∏è  Inst√¢ncia n√£o est√° conectada');
      return;
    }
    
    await loginAsUser(page);
    await page.goto(`${BASE_URL}/integracoes`);
    
    console.log(`üîå Desconectando: ${instance.name}`);
    
    // Procurar bot√£o desconectar
    const disconnectButton = page.locator('button').filter({ 
      hasText: /desconectar|disconnect/i 
    }).first();
    
    if (await disconnectButton.count() > 0) {
      await disconnectButton.click();
      
      // Confirma√ß√£o
      await page.waitForTimeout(1000);
      const confirmButton = page.locator('button').filter({ 
        hasText: /sim|yes|confirm/i 
      }).first();
      
      if (await confirmButton.count() > 0) {
        await confirmButton.click();
      }
      
      // Aguardar desconex√£o
      await page.waitForTimeout(3000);
      
      // Validar no banco
      const disconnectedInstance = await db.instance.findUnique({
        where: { id: testInstanceId }
      });
      
      if (disconnectedInstance?.status === 'disconnected') {
        console.log('‚úÖ Inst√¢ncia desconectada com sucesso');
      } else {
        console.warn(`‚ö†Ô∏è  Status: ${disconnectedInstance?.status}`);
      }
    }
  });

  test('6. ‚úÖ Deve deletar inst√¢ncia', async ({ page }) => {
    console.log('\nüóëÔ∏è  TESTE 6: Deletar inst√¢ncia');
    
    if (!testInstanceId) return;
    
    await loginAsUser(page);
    await page.goto(`${BASE_URL}/integracoes`);
    
    const instance = await db.instance.findUnique({
      where: { id: testInstanceId }
    });
    
    if (!instance) return;
    
    console.log(`üóëÔ∏è  Deletando: ${instance.name}`);
    
    // Procurar bot√£o deletar
    const deleteButton = page.locator('button[aria-label*="Delete"], button').filter({ 
      hasText: /deletar|delete|remover/i 
    }).first();
    
    if (await deleteButton.count() > 0) {
      await deleteButton.click();
      
      // Confirma√ß√£o
      await page.waitForTimeout(1000);
      const confirmButton = page.locator('button').filter({ 
        hasText: /sim|yes|confirm|deletar/i 
      }).first();
      
      if (await confirmButton.count() > 0) {
        await confirmButton.click();
      }
      
      await page.waitForTimeout(3000);
      
      // Validar que foi deletada
      const deletedInstance = await db.instance.findUnique({
        where: { id: testInstanceId }
      });
      
      if (!deletedInstance) {
        console.log('‚úÖ Inst√¢ncia deletada com sucesso (hard delete)');
        testInstanceId = null;
      } else {
        console.warn('‚ö†Ô∏è  Inst√¢ncia ainda existe no banco');
      }
    }
  });

  test('7. üì∏ Screenshot completo do fluxo', async ({ page }) => {
    console.log('\nüì∏ TESTE 7: Screenshots');
    
    await loginAsUser(page);
    await page.goto(`${BASE_URL}/integracoes`);
    
    await page.waitForTimeout(2000);
    await page.screenshot({ 
      path: 'test-results/screenshots/uazapi-instances.png',
      fullPage: true 
    });
    
    console.log('‚úÖ Screenshot salvo');
  });
});

