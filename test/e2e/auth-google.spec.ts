/**
 * Google OAuth E2E Tests
 *
 * ‚ö†Ô∏è ARQUIVO CR√çTICO - N√ÉO EXCLUIR ‚ö†Ô∏è
 * Este arquivo cont√©m testes essenciais para o fluxo de autentica√ß√£o Google OAuth.
 * Sempre execute estes testes antes de fazer deploy para garantir que o OAuth est√° funcionando.
 *
 * Como executar:
 * ```bash
 * npx playwright test test/e2e/auth-google.spec.ts
 * ```
 */

import { test, expect } from '@playwright/test'

test.describe('üîê Google OAuth - Autentica√ß√£o e Cadastro', () => {
  const BASE_URL = process.env.NEXT_PUBLIC_IGNITER_API_URL || 'http://localhost:3000'
  const API_BASE_PATH = process.env.NEXT_PUBLIC_IGNITER_API_BASE_PATH || '/api/v1'
  const GOOGLE_AUTH_ENDPOINT = `${BASE_URL}${API_BASE_PATH}/auth/google`
  const GOOGLE_CALLBACK_ENDPOINT = `${BASE_URL}${API_BASE_PATH}/auth/google/callback`

  test.beforeEach(async ({ page }) => {
    // Limpar localStorage antes de cada teste
    await page.goto(BASE_URL)
    await page.evaluate(() => localStorage.clear())
  })

  /**
   * TESTE 1: Endpoint GET /api/v1/auth/google deve retornar authUrl
   *
   * Valida que o endpoint de in√≠cio do fluxo OAuth est√° funcionando
   * e retornando uma URL v√°lida do Google OAuth.
   */
  test('1Ô∏è‚É£ GET /api/v1/auth/google - Deve retornar authUrl do Google', async ({ request }) => {
    const response = await request.get(GOOGLE_AUTH_ENDPOINT)

    expect(response.ok()).toBeTruthy()
    expect(response.status()).toBe(200)

    const data = await response.json()

    // Validar estrutura da resposta
    expect(data).toHaveProperty('data')
    expect(data).toHaveProperty('error')
    expect(data.error).toBeNull()

    // Validar authUrl
    expect(data.data).toHaveProperty('authUrl')
    expect(data.data.authUrl).toContain('https://accounts.google.com/o/oauth2/v2/auth')
    expect(data.data.authUrl).toContain('client_id=')
    expect(data.data.authUrl).toContain('redirect_uri=')
    expect(data.data.authUrl).toContain('scope=')
    expect(data.data.authUrl).toContain('response_type=code')

    console.log('‚úÖ Google Auth URL retornada com sucesso')
    console.log('üìç AuthURL:', data.data.authUrl.substring(0, 100) + '...')
  })

  /**
   * TESTE 2: Bot√£o "Login com Google" deve redirecionar para o endpoint correto
   *
   * Valida que o frontend est√° corretamente integrado com o endpoint
   * de autentica√ß√£o Google OAuth.
   */
  test('2Ô∏è‚É£ LOGIN - Bot√£o "Login com Google" deve iniciar fluxo OAuth', async ({ page }) => {
    await page.goto(`${BASE_URL}/login`)

    // Aguardar p√°gina carregar
    await page.waitForLoadState('networkidle')

    // Localizar bot√£o de login Google
    const googleLoginButton = page.locator('button:has-text("Continuar com Google")')
    await expect(googleLoginButton).toBeVisible()

    // Interceptar requisi√ß√µes para validar chamada √† API
    let apiCalled = false
    let authUrl = ''

    page.on('request', request => {
      if (request.url().includes('/api/v1/auth/google')) {
        apiCalled = true
        console.log('‚úÖ API chamada:', request.url())
      }
    })

    page.on('response', async response => {
      if (response.url().includes('/api/v1/auth/google')) {
        const data = await response.json()
        if (data.data?.authUrl) {
          authUrl = data.data.authUrl
          console.log('‚úÖ AuthURL recebida:', authUrl.substring(0, 80) + '...')
        }
      }
    })

    // Clicar no bot√£o
    await googleLoginButton.click()

    // Aguardar um pouco para a requisi√ß√£o ser feita
    await page.waitForTimeout(2000)

    // Valida√ß√µes
    expect(apiCalled).toBeTruthy()
    expect(authUrl).toContain('https://accounts.google.com')

    console.log('‚úÖ Fluxo de login iniciado com sucesso')
    console.log('‚ö†Ô∏è Nota: Teste n√£o pode completar OAuth sem credenciais reais do Google')
  })

  /**
   * TESTE 3: Bot√£o "Cadastrar com Google" deve redirecionar para o endpoint correto
   *
   * Valida que o signup est√° corretamente integrado com Google OAuth.
   */
  test('3Ô∏è‚É£ SIGNUP - Bot√£o "Cadastrar com Google" deve iniciar fluxo OAuth', async ({ page }) => {
    await page.goto(`${BASE_URL}/signup`)

    // Aguardar p√°gina carregar
    await page.waitForLoadState('networkidle')

    // Localizar bot√£o de signup Google
    const googleSignupButton = page.locator('button:has-text("Continuar com Google")')
    await expect(googleSignupButton).toBeVisible()

    // Interceptar requisi√ß√µes
    let apiCalled = false
    let authUrl = ''

    page.on('request', request => {
      if (request.url().includes('/api/v1/auth/google')) {
        apiCalled = true
        console.log('‚úÖ API chamada:', request.url())
      }
    })

    page.on('response', async response => {
      if (response.url().includes('/api/v1/auth/google')) {
        const data = await response.json()
        if (data.data?.authUrl) {
          authUrl = data.data.authUrl
          console.log('‚úÖ AuthURL recebida:', authUrl.substring(0, 80) + '...')
        }
      }
    })

    // Clicar no bot√£o
    await googleSignupButton.click()

    // Aguardar requisi√ß√£o
    await page.waitForTimeout(2000)

    // Valida√ß√µes
    expect(apiCalled).toBeTruthy()
    expect(authUrl).toContain('https://accounts.google.com')

    console.log('‚úÖ Fluxo de signup iniciado com sucesso')
  })

  /**
   * TESTE 4: P√°gina de callback deve existir e processar c√≥digo de autoriza√ß√£o
   *
   * Valida que a p√°gina /google-callback existe e est√° pronta para
   * processar o retorno do Google OAuth.
   */
  test('4Ô∏è‚É£ CALLBACK - P√°gina /google-callback deve existir', async ({ page }) => {
    await page.goto(`${BASE_URL}/google-callback`)

    // A p√°gina n√£o deve retornar 404
    const title = await page.title()
    expect(title).not.toContain('404')

    // Deve mostrar loading ou erro (j√° que n√£o tem c√≥digo de autoriza√ß√£o)
    const loadingOrError = await page.locator('text=/Processando|Erro|login/i').first().isVisible()
    expect(loadingOrError).toBeTruthy()

    console.log('‚úÖ P√°gina de callback existe e est√° funcional')
  })

  /**
   * TESTE 5: POST /api/v1/auth/google/callback deve validar c√≥digo obrigat√≥rio
   *
   * Valida que o endpoint de callback requer o c√≥digo de autoriza√ß√£o.
   */
  test('5Ô∏è‚É£ CALLBACK API - Deve requerer c√≥digo de autoriza√ß√£o', async ({ request }) => {
    // Tentar callback sem c√≥digo (deve falhar)
    const responseWithoutCode = await request.post(GOOGLE_CALLBACK_ENDPOINT, {
      data: {}
    })

    expect(responseWithoutCode.ok()).toBeFalsy()

    const dataWithoutCode = await responseWithoutCode.json()
    expect(dataWithoutCode.error).toBeTruthy()

    console.log('‚úÖ Endpoint de callback valida corretamente par√¢metros obrigat√≥rios')
  })

  /**
   * TESTE 6: Validar estrutura de resposta do callback (com c√≥digo inv√°lido)
   *
   * Testa que o endpoint retorna erro adequado para c√≥digo inv√°lido.
   */
  test('6Ô∏è‚É£ CALLBACK API - Deve rejeitar c√≥digo inv√°lido', async ({ request }) => {
    const response = await request.post(GOOGLE_CALLBACK_ENDPOINT, {
      data: {
        code: 'codigo_invalido_teste_123456'
      }
    })

    // Deve retornar erro (c√≥digo inv√°lido)
    expect(response.ok()).toBeFalsy()

    const data = await response.json()
    expect(data.error).toBeTruthy()

    console.log('‚úÖ Endpoint de callback rejeita c√≥digos inv√°lidos corretamente')
    console.log('üìç Erro esperado:', data.error)
  })
})

test.describe('üìä Google OAuth - Testes de Integra√ß√£o', () => {
  const BASE_URL = process.env.NEXT_PUBLIC_IGNITER_API_URL || 'http://localhost:3000'

  /**
   * TESTE 7: Validar vari√°veis de ambiente Google OAuth
   *
   * Verifica se as credenciais do Google OAuth est√£o configuradas.
   */
  test('7Ô∏è‚É£ CONFIG - Vari√°veis de ambiente devem estar configuradas', async ({ request }) => {
    // Testar endpoint (se as vari√°veis n√£o estiverem configuradas, vai falhar)
    const response = await request.get(`${BASE_URL}/api/v1/auth/google`)

    expect(response.ok()).toBeTruthy()

    const data = await response.json()

    // Se authUrl cont√©m client_id, significa que est√° configurado
    expect(data.data.authUrl).toContain('client_id=')

    // Extract client_id da URL
    const clientIdMatch = data.data.authUrl.match(/client_id=([^&]+)/)
    expect(clientIdMatch).toBeTruthy()
    expect(clientIdMatch![1]).not.toBe('')

    console.log('‚úÖ Google OAuth Client ID configurado')
    console.log('üìç Client ID:', clientIdMatch![1].substring(0, 20) + '...')
  })

  /**
   * TESTE 8: Validar redirect_uri est√° correto
   *
   * Verifica que o redirect_uri configurado aponta para /google-callback.
   */
  test('8Ô∏è‚É£ CONFIG - Redirect URI deve apontar para /google-callback', async ({ request }) => {
    const response = await request.get(`${BASE_URL}/api/v1/auth/google`)
    const data = await response.json()

    expect(data.data.authUrl).toContain('redirect_uri=')
    expect(data.data.authUrl).toContain('google-callback')

    // Extract redirect_uri
    const redirectUriMatch = data.data.authUrl.match(/redirect_uri=([^&]+)/)
    expect(redirectUriMatch).toBeTruthy()

    const redirectUri = decodeURIComponent(redirectUriMatch![1])
    expect(redirectUri).toContain('/google-callback')

    console.log('‚úÖ Redirect URI configurado corretamente')
    console.log('üìç Redirect URI:', redirectUri)
  })
})

/**
 * üìö DOCUMENTA√á√ÉO ADICIONAL
 *
 * ## Como testar manualmente o fluxo completo:
 *
 * 1. Acesse http://localhost:3000/login
 * 2. Clique em "Continuar com Google"
 * 3. Fa√ßa login com uma conta Google v√°lida
 * 4. Autorize o aplicativo
 * 5. Voc√™ ser√° redirecionado para /google-callback
 * 6. Se tudo funcionar, voc√™ ser√° redirecionado para o dashboard
 *
 * ## Troubleshooting:
 *
 * **Erro 404 no endpoint:**
 * - Verifique se o servidor Next.js est√° rodando
 * - Confirme que as vari√°veis de ambiente est√£o carregadas
 * - Reinicie o servidor com `npm run dev`
 *
 * **Google OAuth error:**
 * - Verifique se GOOGLE_CLIENT_ID e GOOGLE_CLIENT_SECRET est√£o corretos
 * - Confirme que GOOGLE_REDIRECT_URI est√° registrado no Google Console
 * - Verifique se o redirect_uri no console Google √© exatamente: http://localhost:3000/google-callback
 *
 * **C√≥digo de autoriza√ß√£o inv√°lido:**
 * - C√≥digos OAuth s√£o de uso √∫nico e expiram rapidamente
 * - N√£o tente reutilizar c√≥digos de autoriza√ß√£o
 * - Sempre inicie um novo fluxo OAuth
 */
