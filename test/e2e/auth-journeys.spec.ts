import { test, expect } from '@playwright/test';

/**
 * üß™ SUITE COMPLETA DE TESTES - JORNADAS DE AUTENTICA√á√ÉO
 *
 * Emails v√°lidos para teste (tokens enviados via email):
 * - gabrielrizzatto@hotmail.com
 * - mar.gabrielrizzatto@gmail.com
 * - contato.gabrielrizzatto@gmail.com
 * - gabriel.rizzatto@falecomigo.ai
 */

const BASE_URL = 'http://localhost:3000';

test.describe('üîê Jornada de Autentica√ß√£o Completa', () => {

  test.beforeEach(async ({ page }) => {
    // Limpar cookies e localStorage antes de cada teste
    await page.context().clearCookies();
    await page.goto(`${BASE_URL}/login`);
    await page.evaluate(() => localStorage.clear());
  });

  test('1Ô∏è‚É£ SIGNUP OTP - Novo usu√°rio com OTP', async ({ page }) => {
    console.log('\nüìß Iniciando teste de Signup com OTP...');

    // Navegar para p√°gina de signup
    await page.goto(`${BASE_URL}/signup`);
    await expect(page).toHaveTitle(/Quayer/i);

    // Preencher formul√°rio com email v√°lido
    const testEmail = 'gabrielrizzatto@hotmail.com';
    await page.fill('input[type="email"]', testEmail);
    await page.fill('input[name="name"]', 'Gabriel Rizzatto Test');

    // Enviar formul√°rio
    await page.click('button[type="submit"]');

    // Verificar se foi enviado o c√≥digo
    await expect(page.locator('text=/c√≥digo enviado/i')).toBeVisible({ timeout: 10000 });

    console.log(`‚úÖ C√≥digo OTP enviado para ${testEmail}`);
    console.log('‚è∏Ô∏è  AGUARDANDO: Por favor, informe o c√≥digo OTP recebido no email para continuar o teste...');

    // AQUI: O teste pausa para o usu√°rio fornecer o c√≥digo manualmente
  });

  test('2Ô∏è‚É£ LOGIN OTP - Login sem senha via OTP', async ({ page }) => {
    console.log('\nüìß Iniciando teste de Login com OTP...');

    // Navegar para login
    await page.goto(`${BASE_URL}/login`);

    // Clicar em "Entrar sem senha" ou bot√£o OTP
    await page.click('text=/sem senha/i');

    // Preencher email
    const testEmail = 'mar.gabrielrizzatto@gmail.com';
    await page.fill('input[type="email"]', testEmail);

    // Enviar
    await page.click('button[type="submit"]');

    // Verificar envio
    await expect(page.locator('text=/c√≥digo enviado/i')).toBeVisible({ timeout: 10000 });

    console.log(`‚úÖ C√≥digo OTP de login enviado para ${testEmail}`);
    console.log('‚è∏Ô∏è  AGUARDANDO: Por favor, informe o c√≥digo OTP recebido no email...');
  });

  test('3Ô∏è‚É£ MAGIC LINK - Login via link m√°gico', async ({ page }) => {
    console.log('\nüîó Iniciando teste de Magic Link...');

    // Navegar para login
    await page.goto(`${BASE_URL}/login`);

    // Clicar em op√ß√£o de magic link
    await page.click('text=/link m√°gico/i').catch(() =>
      page.click('text=/email/i')
    );

    // Preencher email
    const testEmail = 'contato.gabrielrizzatto@gmail.com';
    await page.fill('input[type="email"]', testEmail);

    // Enviar
    await page.click('button[type="submit"]');

    // Verificar envio
    await expect(page.locator('text=/email enviado/i')).toBeVisible({ timeout: 10000 });

    console.log(`‚úÖ Magic Link enviado para ${testEmail}`);
    console.log('‚è∏Ô∏è  AGUARDANDO: Por favor, clique no link recebido no email...');
  });

  test('4Ô∏è‚É£ TOKEN JWT - Validar persist√™ncia de token', async ({ page }) => {
    console.log('\nüé´ Iniciando teste de Token JWT...');

    // Primeiro fazer login (assumindo que h√° um usu√°rio v√°lido)
    await page.goto(`${BASE_URL}/login`);

    // Preencher credenciais
    await page.fill('input[type="email"]', 'gabriel.rizzatto@falecomigo.ai');
    await page.fill('input[type="password"]', 'Test@123456');

    // Fazer login
    await page.click('button[type="submit"]');

    // Aguardar redirecionamento
    await page.waitForURL(/\/(integracoes|admin|dashboard)/, { timeout: 10000 });

    // Verificar se token foi salvo no localStorage
    const token = await page.evaluate(() => localStorage.getItem('auth_token'));
    expect(token).toBeTruthy();
    console.log('‚úÖ Token JWT salvo no localStorage');

    // Verificar se token est√° no formato correto (JWT)
    expect(token).toMatch(/^[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+$/);
    console.log('‚úÖ Token JWT no formato correto');

    // Recarregar p√°gina e verificar se token persiste
    await page.reload();
    const tokenAfterReload = await page.evaluate(() => localStorage.getItem('auth_token'));
    expect(tokenAfterReload).toBe(token);
    console.log('‚úÖ Token JWT persiste ap√≥s reload');
  });

  test('5Ô∏è‚É£ ORGANIZATION SWITCH - Trocar de organiza√ß√£o', async ({ page }) => {
    console.log('\nüè¢ Iniciando teste de troca de organiza√ß√£o...');

    // Login como admin/GOD
    await page.goto(`${BASE_URL}/login`);
    await page.fill('input[type="email"]', 'admin@quayer.com');
    await page.fill('input[type="password"]', 'admin123456');
    await page.click('button[type="submit"]');

    // Aguardar dashboard
    await page.waitForURL(/\/(integracoes|admin)/, { timeout: 10000 });

    // Clicar no switcher de organiza√ß√£o
    await page.click('[data-testid="org-switcher"]').catch(() =>
      page.click('text=/organiza√ß√£o/i')
    );

    // Selecionar outra organiza√ß√£o
    await page.click('[role="option"]:first-child').catch(() =>
      page.click('text=/trocar/i')
    );

    // Verificar se novo token foi gerado
    await page.waitForTimeout(1000);
    const newToken = await page.evaluate(() => localStorage.getItem('auth_token'));
    expect(newToken).toBeTruthy();
    console.log('‚úÖ Novo token gerado ap√≥s troca de organiza√ß√£o');
  });

  test('6Ô∏è‚É£ ONBOARDING - Fluxo completo de onboarding', async ({ page }) => {
    console.log('\nüöÄ Iniciando teste de Onboarding...');

    // Criar novo usu√°rio que cair√° no onboarding
    await page.goto(`${BASE_URL}/signup`);

    const newUserEmail = `test.onboarding.${Date.now()}@example.com`;
    await page.fill('input[type="email"]', newUserEmail);
    await page.fill('input[name="name"]', 'Test Onboarding User');
    await page.click('button[type="submit"]');

    // Aguardar c√≥digo OTP (mockar ou aguardar)
    await expect(page.locator('text=/c√≥digo/i')).toBeVisible({ timeout: 10000 });

    console.log(`‚úÖ Novo usu√°rio criado: ${newUserEmail}`);
    console.log('‚è∏Ô∏è  AGUARDANDO: Verificar c√≥digo OTP e completar onboarding...');
  });
});

test.describe('üîí Testes de Seguran√ßa e Autoriza√ß√£o', () => {

  test('7Ô∏è‚É£ UNAUTHORIZED - Rotas protegidas sem token', async ({ page }) => {
    console.log('\nüõ°Ô∏è Testando rotas protegidas...');

    // Tentar acessar rota protegida sem auth
    await page.goto(`${BASE_URL}/integracoes`);

    // Deve redirecionar para login
    await page.waitForURL(/\/login/, { timeout: 5000 });
    console.log('‚úÖ Redirecionado para login ao acessar rota protegida');
  });

  test('8Ô∏è‚É£ TOKEN EXPIRED - Token expirado deve fazer logout', async ({ page }) => {
    console.log('\n‚è∞ Testando expira√ß√£o de token...');

    // Setar token expirado manualmente
    await page.goto(`${BASE_URL}/login`);
    await page.evaluate(() => {
      localStorage.setItem('auth_token', 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2MzAwMDAwMDB9.invalid');
    });

    // Tentar acessar rota protegida
    await page.goto(`${BASE_URL}/integracoes`);

    // Deve ser redirecionado para login
    await page.waitForURL(/\/login/, { timeout: 5000 });
    console.log('‚úÖ Token expirado removido e redirecionado');
  });
});

test.describe('üìä Testes de Performance e UX', () => {

  test('9Ô∏è‚É£ LOADING STATES - Estados de carregamento', async ({ page }) => {
    console.log('\n‚è≥ Testando estados de loading...');

    await page.goto(`${BASE_URL}/login`);

    // Preencher form
    await page.fill('input[type="email"]', 'test@test.com');
    await page.fill('input[type="password"]', 'Test@123');

    // Click e verificar loading
    const submitButton = page.locator('button[type="submit"]');
    await submitButton.click();

    // Verificar loading state (spinner, disabled, etc)
    await expect(submitButton).toBeDisabled({ timeout: 1000 }).catch(() =>
      expect(page.locator('[role="status"]')).toBeVisible({ timeout: 1000 })
    );

    console.log('‚úÖ Loading state exibido corretamente');
  });

  test('üîü ERROR HANDLING - Tratamento de erros', async ({ page }) => {
    console.log('\n‚ùå Testando tratamento de erros...');

    await page.goto(`${BASE_URL}/login`);

    // Enviar com credenciais inv√°lidas
    await page.fill('input[type="email"]', 'invalid@test.com');
    await page.fill('input[type="password"]', 'wrongpass');
    await page.click('button[type="submit"]');

    // Verificar mensagem de erro
    await expect(page.locator('text=/inv√°lid|incorret|erro/i')).toBeVisible({ timeout: 5000 });
    console.log('‚úÖ Mensagem de erro exibida corretamente');
  });
});
