import { test, expect } from '@playwright/test';

/**
 * Teste completo do fluxo de integra√ß√µes com login admin
 * Este teste valida:
 * 1. Login com credenciais admin
 * 2. Navega√ß√£o para p√°gina de integra√ß√µes
 * 3. Cria√ß√£o de nova integra√ß√£o
 * 4. Verifica√ß√£o se o card aparece ap√≥s cria√ß√£o
 */

test.describe('Integra√ß√µes - Fluxo Completo Admin', () => {
  test.beforeEach(async ({ page }) => {
    // Navegar para a p√°gina de login
    await page.goto('http://localhost:3000', { waitUntil: 'domcontentloaded' });

    // Aguardar um pouco para a p√°gina estabilizar
    await page.waitForTimeout(2000);
  });

  test('deve fazer login como admin e criar integra√ß√£o com sucesso', async ({ page }) => {
    // ========================================
    // PASSO 1: LOGIN COMO ADMIN
    // ========================================
    console.log('üìù Passo 1: Fazendo login como admin...');

    // Verificar se estamos na p√°gina de login
    await expect(page).toHaveURL(/\/(login|auth|$)/);

    // Preencher email
    const emailInput = page.locator('input[type="email"], input[name="email"], input[placeholder*="email" i]').first();
    await emailInput.waitFor({ state: 'visible', timeout: 10000 });
    await emailInput.fill('admin@quayer.com');

    // Clicar no bot√£o de continuar/login
    const loginButton = page.locator('button:has-text("Continuar"), button:has-text("Entrar"), button:has-text("Login")').first();
    await loginButton.click();

    // Aguardar aparecer o campo de senha ou OTP
    await page.waitForTimeout(2000);

    // Tentar preencher senha (se houver campo de senha)
    const passwordInput = page.locator('input[type="password"], input[name="password"]').first();
    const passwordVisible = await passwordInput.isVisible().catch(() => false);

    if (passwordVisible) {
      console.log('üîê Campo de senha encontrado, preenchendo...');
      await passwordInput.fill('admin123456');

      // Clicar em entrar
      const submitButton = page.locator('button[type="submit"], button:has-text("Entrar")').first();
      await submitButton.click();
    } else {
      // Se n√£o houver senha, pode ser OTP
      console.log('üî¢ Tentando OTP...');
      const otpInput = page.locator('input[name="code"], input[placeholder*="c√≥digo" i]').first();
      const otpVisible = await otpInput.isVisible().catch(() => false);

      if (otpVisible) {
        await otpInput.fill('123456');
        const submitButton = page.locator('button[type="submit"], button:has-text("Verificar")').first();
        await submitButton.click();
      }
    }

    // Aguardar redirecionamento ap√≥s login
    await page.waitForTimeout(3000);

    // Tirar screenshot ap√≥s login
    await page.screenshot({ path: 'test-screenshots/admin-01-after-login.png', fullPage: true });
    console.log('‚úÖ Screenshot salvo: admin-01-after-login.png');

    // ========================================
    // PASSO 2: NAVEGAR PARA INTEGRA√á√ïES
    // ========================================
    console.log('üìù Passo 2: Navegando para p√°gina de integra√ß√µes...');

    await page.goto('http://localhost:3000/integracoes', { waitUntil: 'domcontentloaded' });
    await page.waitForTimeout(3000);

    // Verificar se estamos na p√°gina de integra√ß√µes
    await expect(page).toHaveURL(/\/integracoes/);

    // Tirar screenshot da p√°gina inicial de integra√ß√µes
    await page.screenshot({ path: 'test-screenshots/admin-02-integracoes-initial.png', fullPage: true });
    console.log('‚úÖ Screenshot salvo: admin-02-integracoes-initial.png');

    // Verificar elementos principais da p√°gina
    const pageTitle = page.locator('h1:has-text("Integra√ß√µes WhatsApp")');
    await expect(pageTitle).toBeVisible();
    console.log('‚úÖ T√≠tulo da p√°gina encontrado');

    // Contar quantas integra√ß√µes existem antes
    const cardsBefore = page.locator('[data-testid="integration-card"], .grid > div > div[class*="Card"]');
    const countBefore = await cardsBefore.count().catch(() => 0);
    console.log(`üìä Integra√ß√µes antes: ${countBefore}`);

    // ========================================
    // PASSO 3: ABRIR MODAL DE CRIA√á√ÉO
    // ========================================
    console.log('üìù Passo 3: Abrindo modal de cria√ß√£o...');

    // Encontrar e clicar no bot√£o "Nova Integra√ß√£o"
    const newIntegrationButton = page.locator('button:has-text("Nova Integra√ß√£o")').first();
    await expect(newIntegrationButton).toBeVisible({ timeout: 10000 });
    await newIntegrationButton.click();

    // Aguardar modal aparecer
    await page.waitForTimeout(1000);

    // Tirar screenshot do modal aberto
    await page.screenshot({ path: 'test-screenshots/admin-03-modal-opened.png', fullPage: true });
    console.log('‚úÖ Screenshot salvo: admin-03-modal-opened.png');

    // Verificar se o modal est√° vis√≠vel
    const modalTitle = page.locator('text="Criar Nova Integra√ß√£o WhatsApp Business"');
    await expect(modalTitle).toBeVisible();
    console.log('‚úÖ Modal de cria√ß√£o aberto');

    // ========================================
    // PASSO 4: AVAN√áAR PARA STEP DE CONFIG
    // ========================================
    console.log('üìù Passo 4: Avan√ßando para configura√ß√£o...');

    // Clicar em "Pr√≥ximo" no step de canal
    const nextButton = page.locator('button:has-text("Pr√≥ximo")').first();
    await nextButton.click();
    await page.waitForTimeout(1000);

    // ========================================
    // PASSO 5: PREENCHER FORMUL√ÅRIO
    // ========================================
    console.log('üìù Passo 5: Preenchendo formul√°rio...');

    // Preencher nome da inst√¢ncia
    const nameInput = page.locator('input#name, input[name="name"]').first();
    await expect(nameInput).toBeVisible();
    const testInstanceName = `Test Instance ${Date.now()}`;
    await nameInput.fill(testInstanceName);
    console.log(`‚úÖ Nome preenchido: ${testInstanceName}`);

    // Preencher descri√ß√£o (opcional)
    const descriptionInput = page.locator('textarea#description, textarea[name="description"]').first();
    const descVisible = await descriptionInput.isVisible().catch(() => false);
    if (descVisible) {
      await descriptionInput.fill('Teste automatizado de cria√ß√£o de integra√ß√£o');
      console.log('‚úÖ Descri√ß√£o preenchida');
    }

    // Tirar screenshot do formul√°rio preenchido
    await page.screenshot({ path: 'test-screenshots/admin-04-form-filled.png', fullPage: true });
    console.log('‚úÖ Screenshot salvo: admin-04-form-filled.png');

    // ========================================
    // PASSO 6: CRIAR INTEGRA√á√ÉO
    // ========================================
    console.log('üìù Passo 6: Criando integra√ß√£o...');

    // Clicar no bot√£o "Criar"
    const createButton = page.locator('button:has-text("Criar")').first();
    await expect(createButton).toBeEnabled();
    await createButton.click();

    // Aguardar a cria√ß√£o (pode mostrar loading)
    await page.waitForTimeout(3000);

    // Tirar screenshot ap√≥s clicar em criar
    await page.screenshot({ path: 'test-screenshots/admin-05-after-create-click.png', fullPage: true });
    console.log('‚úÖ Screenshot salvo: admin-05-after-create-click.png');

    // ========================================
    // PASSO 7: FECHAR MODAL (se ainda estiver aberto)
    // ========================================
    console.log('üìù Passo 7: Verificando se modal fechou...');

    // Tentar fechar o modal se ele ainda estiver aberto
    const closeButton = page.locator('button:has-text("Concluir"), button:has-text("Fechar"), [aria-label="Close"]').first();
    const modalStillOpen = await closeButton.isVisible().catch(() => false);

    if (modalStillOpen) {
      console.log('‚ö†Ô∏è Modal ainda aberto, fechando...');
      await closeButton.click();
      await page.waitForTimeout(1000);
    }

    // Pressionar ESC para garantir que modal feche
    await page.keyboard.press('Escape');
    await page.waitForTimeout(1000);

    // ========================================
    // PASSO 8: VERIFICAR SE CARD APARECEU
    // ========================================
    console.log('üìù Passo 8: Verificando se card apareceu...');

    // Aguardar um pouco para a lista atualizar
    await page.waitForTimeout(2000);

    // Tirar screenshot do estado final
    await page.screenshot({ path: 'test-screenshots/admin-06-final-state.png', fullPage: true });
    console.log('‚úÖ Screenshot salvo: admin-06-final-state.png');

    // Contar quantas integra√ß√µes existem agora
    const cardsAfter = page.locator('[data-testid="integration-card"], .grid > div > div[class*="Card"]');
    const countAfter = await cardsAfter.count().catch(() => 0);
    console.log(`üìä Integra√ß√µes depois: ${countAfter}`);

    // Procurar pelo card com o nome criado
    const newCard = page.locator(`text="${testInstanceName}"`).first();
    const cardVisible = await newCard.isVisible().catch(() => false);

    // ========================================
    // RESULTADO DO TESTE
    // ========================================
    console.log('\n========================================');
    console.log('üìä RESULTADO DO TESTE:');
    console.log('========================================');
    console.log(`Integra√ß√µes antes: ${countBefore}`);
    console.log(`Integra√ß√µes depois: ${countAfter}`);
    console.log(`Card vis√≠vel: ${cardVisible ? '‚úÖ SIM' : '‚ùå N√ÉO'}`);
    console.log(`Nome buscado: ${testInstanceName}`);

    if (cardVisible) {
      console.log('\n‚úÖ SUCESSO: Card apareceu ap√≥s cria√ß√£o!');
      console.log('üéâ Bug N√ÉO reproduzido - funcionalidade est√° OK');
    } else {
      console.log('\n‚ùå FALHA: Card N√ÉO apareceu ap√≥s cria√ß√£o!');
      console.log('üêõ Bug REPRODUZIDO - card n√£o est√° vis√≠vel na lista');

      // Verificar se h√° mensagem de erro
      const errorMessage = page.locator('text=/erro|error/i').first();
      const errorVisible = await errorMessage.isVisible().catch(() => false);
      if (errorVisible) {
        const errorText = await errorMessage.textContent();
        console.log(`‚ö†Ô∏è Erro encontrado: ${errorText}`);
      }

      // Verificar console do navegador
      page.on('console', msg => console.log('üñ•Ô∏è Console:', msg.text()));
    }
    console.log('========================================\n');

    // Asser√ß√£o final
    if (cardVisible) {
      expect(countAfter).toBeGreaterThan(countBefore);
    } else {
      console.log('‚ö†Ô∏è Card n√£o encontrado. Verificar screenshots para an√°lise manual.');
    }
  });
});
